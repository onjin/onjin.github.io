<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>marekwywial (programowanie)</title><link>http://marekwywial.name/</link><description>never is often better than *right* now</description><atom:link href="http://marekwywial.name/categories/programowanie.xml" type="application/rss+xml" rel="self"></atom:link><lastBuildDate>Thu, 03 Oct 2013 22:45:26 GMT</lastBuildDate><generator>nikola</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Python SOAP server (flask) + wsdl generation</title><link>http://marekwywial.name/posts/blog20130813python-soap-server-flask-wsdl-generation.html</link><description>&lt;p&gt;&lt;/p&gt;&lt;h4&gt;Install&lt;/h4&gt;
[bash]
&lt;p&gt;$ pip install Flask-Enterprise&lt;/p&gt;
&lt;p&gt;[/bash]&lt;/p&gt;
&lt;h4&gt;file: soap.py&lt;/h4&gt;

&lt;p&gt;[python]&lt;/p&gt;
&lt;p&gt;from time import ctime&lt;/p&gt;
&lt;p&gt;from flask import Flask&lt;/p&gt;
&lt;p&gt;from flaskext.enterprise import Enterprise&lt;/p&gt;
&lt;p&gt;app = Flask(&lt;strong&gt;name&lt;/strong&gt;)&lt;/p&gt;
&lt;p&gt;enterprise = Enterprise(app)&lt;/p&gt;
&lt;p&gt;class DemoService(enterprise.SOAPService):
    &lt;strong&gt;soap_server_address&lt;/strong&gt; = '/soap'
    &lt;strong&gt;soap_target_namespace&lt;/strong&gt; = 'ns'&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;enterprise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;soap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_returns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;enterprise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_sp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;get_time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ctime&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == '&lt;strong&gt;main&lt;/strong&gt;':
    app.run(host='127.0.0.1', port=5555)
[/python]&lt;/p&gt;
&lt;h4&gt;Run service&lt;/h4&gt;

&lt;p&gt;[bash]&lt;/p&gt;
&lt;p&gt;$ python soap.py&lt;/p&gt;
&lt;p&gt;[/bash]&lt;/p&gt;
&lt;h4&gt;file: client.py&lt;/h4&gt;

&lt;p&gt;[python]&lt;/p&gt;
&lt;p&gt;from suds.client import Client&lt;/p&gt;
&lt;p&gt;c = Client('http://127.0.0.1:5555/soap?wsdl')&lt;/p&gt;
&lt;p&gt;print c.service.get_time()&lt;/p&gt;
&lt;p&gt;[/python]&lt;/p&gt;
&lt;h4&gt;Run test&lt;/h4&gt;

&lt;p&gt;[bash]&lt;/p&gt;
&lt;p&gt;$ python client.py&lt;/p&gt;
&lt;p&gt;Tue Aug 13 19:49:53 2013&lt;/p&gt;
&lt;p&gt;[/bash]&lt;/p&gt;</description><category>onjin</category><category>programowanie</category><category>python</category><category>webdev</category><guid>http://marekwywial.name/posts/blog20130813python-soap-server-flask-wsdl-generation.html</guid><pubDate>Tue, 13 Aug 2013 16:53:49 GMT</pubDate></item><item><title>vim snippetsemu i liquibase</title><link>http://marekwywial.name/posts/blog20100811vim-snippetsemu-i-liquibase.html</link><description>&lt;p&gt;&lt;/p&gt;&lt;p&gt;W &lt;a href="http://onjin.net/blog/2010/07/29/best-vim-plugins/"&gt;ostatnim wpisie&lt;/a&gt; pisałem o &lt;a href="http://www.vim.org/scripts/script.php?script_id=1318"&gt;snippetsEmu&lt;/a&gt; dla &lt;a href="http://www.vim.org/"&gt;vim&lt;/a&gt;'a, a dziś załączam &lt;a href="http://marekwywial.name/files/xml_snippets.vim"&gt;zestaw snippetów&lt;/a&gt;, których używam przy pracy z &lt;a href="http://www.liquibase.org/"&gt;liquibase&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Liquibase&lt;/strong&gt; to całkiem miłe narzędzie napisane w Javie do śledzenia, zarządzania i wprowadzania zmian w bazach danych. Zmiany opisuje się w pliku (plikach) xml i wpisywanie oraz pamiętanie tej składni można sobie uprościć przy pomocy vim'a i snippetów.&lt;/p&gt;

&lt;p&gt;Snippet umieszczamy razem z pozostałymi, najczęściej w &lt;strong&gt;.vim/after/ftplugin/&lt;/strong&gt;.

Najprościej zacząć otwierając np. &lt;em&gt;migration.xml&lt;/em&gt;, wpisując &lt;em&gt;lhelp&lt;/em&gt; i wcisnąć &lt;em&gt;TAB&lt;/em&gt;. Otrzymamy małą pomoc i możemy zaczynać wpisywać kolejną migrację :)&lt;/p&gt;

&lt;p&gt; » &lt;a href="http://marekwywial.name/files/xml_snippets.vim"&gt;xml_snippets.vim&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description><category>programowanie</category><category>tools</category><category>vim</category><guid>http://marekwywial.name/posts/blog20100811vim-snippetsemu-i-liquibase.html</guid><pubDate>Wed, 11 Aug 2010 16:45:35 GMT</pubDate></item><item><title>best vim plugins</title><link>http://marekwywial.name/posts/blog20100729best-vim-plugins.html</link><description>&lt;p&gt;&lt;/p&gt;&lt;p&gt;Dziś robiłem porządki w ~/.vim/ . Aktualizacje do nowych wersji pluginów, wyrzucanie nieużywanych, porządki w ~/.vimrc. W trakcie tej pracy powstała lista pluginów, dzięki którym miło mi się pracuje&lt;/p&gt;
&lt;h4&gt;vimball&lt;/h4&gt;

&lt;p&gt;Plugin zajmujący się pluginami dostarczanymi w paczkach .vba i pozwalający też takie paczki tworzyć, w praktyce potrzeby mi by instalować paczki .vba&lt;br&gt;

 » &lt;a href="http://www.vim.org/scripts/script.php?script_id=1502"&gt;vimball&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;h4&gt;snippetsEmu&lt;/h4&gt;

&lt;p&gt;Emuluje zachowanie snippetów z TextMate. Na przykład w pliku sometest.py wpisujesz 'for&amp;lt;tab&amp;gt;', uzupełniasz brakujące miejsca poruszając się klawiszem &amp;lt;tab&amp;gt; i otrzymujesz pełną pętle. Inne użyteczne snippety dla pythona to: &lt;strong&gt;prop&lt;/strong&gt; - property, &lt;strong&gt;get&lt;/strong&gt; - def get_.., &lt;strong&gt;set&lt;/strong&gt; - def set_.., &lt;strong&gt;def&lt;/strong&gt; - def .., &lt;strong&gt;cm&lt;/strong&gt; - classmethod, &lt;strong&gt;cl&lt;/strong&gt; - class .. oraz &lt;strong&gt;ifn, ifmain, sb, sbu, sbl1, trye, tryf, tryef, unittest&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Domyślnie dostarczone są 32 zestawy snippetów dla wielu języków programowania, opisu oraz frameworków (django, rails, symfony).&lt;br&gt;

 » &lt;a href="http://www.vim.org/scripts/script.php?script_id=1318"&gt;snippetsEmu&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;h4&gt;neocomplcache&lt;/h4&gt;

&lt;p&gt;System tzw 'dopełniania' (podpowiadania) i to właśnie robi. Dopełnia nazwy metod, funkcji, atrybuty html, nazwy plików, itp. Trzeba po prostu zobaczyć i używać.&lt;br&gt;

 » &lt;a href="http://www.vim.org/scripts/script.php?script_id=2620"&gt;neocomplcache&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;h4&gt;project&lt;/h4&gt;

&lt;p&gt;Bardzo prosty i skuteczny system pozwalający w bocznym oknie przeglądać wybrane lub wszystkie pliki z jednego lub wielu projektów. Każdy projekt ma zdefiniowany katalog, dzięki czemu otwarcie pliku z projektu (wciskamy 'enter' bedąc 'nad' plikiem) nastąpi równocześnie z przejściem do katalogu projektu. W ten sposób pliki projektu jak np 'tags' (ctags) zostaną poprawnie wczytane.&lt;br&gt;

 » &lt;a href="http://www.vim.org/scripts/script.php?script_id=69"&gt;project&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;h4&gt;simple pairs&lt;/h4&gt;

&lt;p&gt;Proste dopełnianie dla ", ', {, (, [ . Wpisanie znaku otwierającego powoduje automatyczne dopisanie znaku zamykającego. W przypadku {, (, [ gdy sami wpiszemy znak zamykający, nie zostanie on zdublowany. Kursor po prostu przesunie się dalej. Dla ", ' zostanie jednak stworzona kolejna para. Krótkie i skuteczne.&lt;br&gt;

 » &lt;a href="http://www.vim.org/scripts/script.php?script_id=2339"&gt;simple pairs&lt;/a&gt;&lt;br&gt;&lt;/p&gt;

&lt;h4&gt;vcscommand&lt;/h4&gt;

&lt;p&gt;Plugin pozwalający wykonywać komendy dla CVS, SVN, SVK, git, bzr, and hg przy pomocy vim'a. Jeden zestaw komend bez względy na system kontroli wersji.&lt;br&gt;

 » &lt;a href="http://www.vim.org/scripts/script.php?script_id=90"&gt;vcscommand&lt;/a&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;Niewiele tego, ale te pluginy, git (post/pre hooki), bash + zestaw skryptów wystarcza mi do pracy :)&lt;/p&gt;</description><category>programowanie</category><category>python</category><category>tools</category><category>vim</category><guid>http://marekwywial.name/posts/blog20100729best-vim-plugins.html</guid><pubDate>Thu, 29 Jul 2010 18:34:19 GMT</pubDate></item><item><title>lint dla php</title><link>http://marekwywial.name/posts/blog20080902lint-dla-php.html</link><description>&lt;p&gt;&lt;/p&gt;&lt;p&gt;Za dnia piszę najczęściej w &lt;a href="http://php.net"&gt;php&lt;/a&gt; i zazdroszczę &lt;a href="http://python.org/"&gt;pythonowi&lt;/a&gt; &lt;a href="http://www.logilab.org/857"&gt;pylinta&lt;/a&gt;.&lt;br&gt;
Z ciekawości zagooglałem i znalazłem rozwiązanie dla PHP sprawdzające Coding Standard:&lt;/p&gt;
&lt;pre&gt;

pear install PHP_CodeSniffer

phpcs --standard=Zend SomeTest.class.php

&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;phpcs -i&lt;/em&gt; podaje dostępne standardy:&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;PEAR&lt;/li&gt;

&lt;li&gt;MySource&lt;/li&gt;

&lt;li&gt;PHPCS&lt;/li&gt;

&lt;li&gt;Squiz&lt;/li&gt;

&lt;li&gt;Zend&lt;/li&gt;

&lt;/ul&gt;&lt;p&gt;Mi najbardzie odpowiada Zend co widać po wynikach lintowania, najczęściej 0 ostrzeżeń i błędów ;).&lt;/p&gt;

&lt;p&gt;phpcs pozwala także tworzyć swoje &lt;a href="http://pear.php.net/manual/en/package.php.php-codesniffer.coding-standard-tutorial.php"&gt;własne standardy kodowanie&lt;/a&gt; oraz - co bardzo mnie cieszy - podpiąć go jako &lt;a href="http://pear.php.net/manual/en/package.php.php-codesniffer.svn-pre-commit.php"&gt;precommit hook&lt;/a&gt; do &lt;a href="http://subversion.tigris.org/"&gt;svn'a&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description><category>php</category><category>programowanie</category><category>tools</category><category>webdev</category><guid>http://marekwywial.name/posts/blog20080902lint-dla-php.html</guid><pubDate>Tue, 02 Sep 2008 19:01:02 GMT</pubDate></item></channel></rss>