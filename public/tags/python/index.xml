<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on Marek Wywiał</title>
    <link>https://marekwywial.name/tags/python/</link>
    <description>Recent content in python on Marek Wywiał</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pl</language>
    <lastBuildDate>Sat, 12 Oct 2013 01:26:16 +0000</lastBuildDate>
    
	<atom:link href="https://marekwywial.name/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Telewizja N (nc&#43;) i python</title>
      <link>https://marekwywial.name/posts/telewizja-n-nc-i-python.html</link>
      <pubDate>Sat, 12 Oct 2013 01:26:16 +0000</pubDate>
      
      <guid>https://marekwywial.name/posts/telewizja-n-nc-i-python.html</guid>
      <description>&lt;p&gt;Aby się przeklikać przez program na &lt;a href=&#34;http://n.pl/&#34;&gt;http://n.pl/&lt;/a&gt; i jeszcze znaleźć interesujący program, to jest ponad moje siły.&lt;/p&gt;

&lt;p&gt;Napisałem więc na szybko narzędzie działające w shellu, które pozwala przeglądać oraz przeszukiwać program ze strony
n.pl &lt;a href=&#34;https://github.com/onjin/ntv/&#34;&gt;https://github.com/onjin/ntv/&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python SOAP server (flask) &#43; wsdl generation</title>
      <link>https://marekwywial.name/posts/blog20130813python-soap-server-flask-wsdl-generation.html</link>
      <pubDate>Tue, 13 Aug 2013 18:53:49 +0000</pubDate>
      
      <guid>https://marekwywial.name/posts/blog20130813python-soap-server-flask-wsdl-generation.html</guid>
      <description>&lt;p&gt;Simple tutorial how quickly create SOAP server using python &amp;ldquo;Flask-Enterprise&amp;rdquo; package for &amp;ldquo;flash&amp;rdquo; web framework.
Example comes with basic client using &amp;ldquo;suds&amp;rdquo; package.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>vim &#43; vundle plugin manager &#43; programming</title>
      <link>https://marekwywial.name/posts/blog20120314vim-vundle-plugin-manager-programming.html</link>
      <pubDate>Wed, 14 Mar 2012 22:50:36 +0000</pubDate>
      
      <guid>https://marekwywial.name/posts/blog20120314vim-vundle-plugin-manager-programming.html</guid>
      <description>Kilku znajomych chciało zacząć używać vim&amp;rsquo;a. Ale konfigurowanie go na starcie, dobieranie pluginów, instalowanie ich, gdy się jeszcze nic nie wie tylko chce się spróbować zazwyczaj powodowało przełożenie tej próby na &amp;lsquo;kiedy indziej&amp;rsquo;.
Niedawno poznałem i zacząłem używać plugin manager&amp;rsquo;a https://github.com/gmarik/vundle i sam potrzebowałem szybko przenieść konfigurację na drugi komputer i na laptopa. Zazwyczaj używałem dropbox&amp;rsquo;a i podlinkowanego pliku .vimrc oraz całego katalogu .vim ze wszystkimi pluginami.
Jednak używając plugin managera, którego konfiguracja znajduje się w .vimrc pozwala teraz posługiwać się jedynie plikiem .vimrc. Zgodnie z programistyczną zasadą &amp;lsquo;jak masz coś zrobić więcej niż 2 razy, napisz program&amp;rsquo; powstał mały skrypt + podstawowy .vimrc pozwalający szybko uruchomić vim&amp;rsquo;a skonfigurowanego pod programowanie w ciągu kilku minut.
 https://github.com/onjin/vim-startup  Jak na razie przydało się mi i kilku innym osobom :) . Plik .vimrc jest oczywiście przykładowy i jak już sobie poużywasz vim&amp;rsquo;a i zdecydujesz się go poznać lepiej wtedy po kolei skonfigurujesz go pod siebie.</description>
    </item>
    
    <item>
      <title>Grooveshark currentSong.txt &#43; gajim status</title>
      <link>https://marekwywial.name/posts/blog20110319grooveshark-currentsong-txt-gajim-status.html</link>
      <pubDate>Sat, 19 Mar 2011 13:03:04 +0000</pubDate>
      
      <guid>https://marekwywial.name/posts/blog20110319grooveshark-currentsong-txt-gajim-status.html</guid>
      <description>Przy okazji szukania API do grooveshark&amp;rsquo;a odkryłem plik currentSong.txt, który jest tworzony przez Grooveshark Desktop.
Kilka minut z vim&amp;rsquo;em i mamy skrypt napisany w python&amp;rsquo;ie, który odczytuje w/w plik i wrzuca informację o aktualnie odtwarzanym utworze jako status wybranego konta w gajim&amp;rsquo;a.
Skrypt umożliwia także uruchomienie go w trybie monitorowania w/w pliku (wymana pyinotify). Wtedy nasz status będzie zmieniany w chwili (chwilę potem :) ) zmiany utworu w Grooveshark Desktop.
Całość można dowolnie używać/modyfikować, a pobrać można z serwisu github.com:
 https://github.com/onjin/grooveshark2gajim http://onjin.github.com/grooveshark2gajim/  Do działania wystarczy nam plik grov2gajim.py. Umieszczamy go gdzieś na dysku i możemy używać.</description>
    </item>
    
    <item>
      <title>best vim plugins</title>
      <link>https://marekwywial.name/posts/blog20100729best-vim-plugins.html</link>
      <pubDate>Thu, 29 Jul 2010 20:34:19 +0000</pubDate>
      
      <guid>https://marekwywial.name/posts/blog20100729best-vim-plugins.html</guid>
      <description>Dziś robiłem porządki w ~/.vim/ . Aktualizacje do nowych wersji pluginów, wyrzucanie nieużywanych, porządki w ~/.vimrc. W trakcie tej pracy powstała lista pluginów, dzięki którym miło mi się pracuje
vimball Plugin zajmujący się pluginami dostarczanymi w paczkach .vba i pozwalający też takie paczki tworzyć, w praktyce potrzeby mi by instalować paczki .vba
 http://www.vim.org/scripts/script.php?script_id=1502  snippetsEmu Emuluje zachowanie snippetów z TextMate. Na przykład w pliku sometest.py wpisujesz &amp;lsquo;for&amp;lt;tab&amp;gt;&amp;rsquo;, uzupełniasz brakujące miejsca poruszając się klawiszem &amp;lt;tab&amp;gt; i otrzymujesz pełną pętle. Inne użyteczne snippety dla pythona to:
 prop - property get - def get_.. set - def set_.. def - def .. cm - classmethod cl - class ifn, ifmain, sb, sbu, sbl1, trye, tryf, tryef, unittest  Domyślnie dostarczone są 32 zestawy snippetów dla wielu języków programowania, opisu oraz frameworków (django, rails, symfony)
 http://www.vim.org/scripts/script.php?script_id=1318  neocomplcache System tzw &amp;lsquo;dopełniania&amp;rsquo; (podpowiadania) i to właśnie robi. Dopełnia nazwy metod, funkcji, atrybuty html, nazwy plików, itp. Trzeba po prostu zobaczyć i używać.
 http://www.vim.org/scripts/script.php?script_id=2620  project Bardzo prosty i skuteczny system pozwalający w bocznym oknie przeglądać wybrane lub wszystkie pliki z jednego lub wielu projektów. Każdy projekt ma zdefiniowany katalog, dzięki czemu otwarcie pliku z projektu (wciskamy &amp;lsquo;enter&amp;rsquo; bedąc &amp;lsquo;nad&amp;rsquo; plikiem) nastąpi równocześnie z przejściem do katalogu projektu.</description>
    </item>
    
    <item>
      <title>git php syntax check pre-commit</title>
      <link>https://marekwywial.name/posts/blog20100504git-php-syntax-check-pre-commit/</link>
      <pubDate>Tue, 04 May 2010 07:52:53 +0000</pubDate>
      
      <guid>https://marekwywial.name/posts/blog20100504git-php-syntax-check-pre-commit/</guid>
      <description>Załączam używany przeze mnie i sprawdzający się pre-commit dla git&amp;lsquo;a sprawdzający commitowane pliki .php.
Przy wykonaniu commit w repozytorium skrypt dla każdego commitowanego pliku &amp;lsquo;.php&amp;rsquo; wykonuje &amp;lsquo;php -l&amp;rsquo; w pętli, aż otrzyma odpowiedź, że składnia jest ok lub nie ok. Przypadku wystąpienia błędy przerywa commit. Sam skrypt napisany jest w python&amp;lsquo;ie
Dlaczego w pętli? Dlatego, że &amp;lsquo;php -l&amp;rsquo; losowo się urywa zwracając SIGFAULT i należy wtedy powtórzyć próbę z &amp;lsquo;-l&amp;rsquo;
Plik do pobrania:
 pre-commit  </description>
    </item>
    
    <item>
      <title>devhelp &#43; django 1.1</title>
      <link>https://marekwywial.name/posts/blog20100426devhelp-django-1-1/</link>
      <pubDate>Mon, 26 Apr 2010 19:51:34 +0100</pubDate>
      
      <guid>https://marekwywial.name/posts/blog20100426devhelp-django-1-1/</guid>
      <description>Ostatnio biegałem z lapkiem po centrum handlowym i łapałem wifi, żeby spojrzeć do dokumentacji django. I tylko się nabiegałem :).
Aby drugi raz pracować nie biegać w domu szybko podłączyłem dokumentację django do devhelp i tak na szybko procedura:
apt-get install devhelp mkdir -p ~/bin; cd ~/bin wget http://htmlhelp.googlecode.com/svn/trunk/misc/devhelp-install chmod +x devhelp-install cd ~/; wget http://onjin.net/files/django1.1-doc.tgz /bin/devhelp-install ./django1.1-doc.tgz Teraz wystarczy uruchomić devhelp&amp;rsquo;a i cieszyć się offline :)
django1.1-doc jest ściągnięte z .chm i potraktowana hhconvert.py do formatu devhelp&amp;rsquo;a)</description>
    </item>
    
    <item>
      <title>fuse ftp mount - curlftpfs</title>
      <link>https://marekwywial.name/posts/blog20090621fuse-ftp-mount-curlftpfs/</link>
      <pubDate>Sun, 21 Jun 2009 19:11:10 +0000</pubDate>
      
      <guid>https://marekwywial.name/posts/blog20090621fuse-ftp-mount-curlftpfs/</guid>
      <description>sprawdź najnowszą wersję ftpmount Do pracy z hostingiem gdzie mamy tylko &amp;ldquo;&amp;lsquo;ftp&amp;rdquo;&amp;rsquo; przydaje się montowanie dysku poprzez właśnie ftp. Służy do tego program &amp;ldquo;&amp;lsquo;curlftpfs&amp;rdquo;&amp;rsquo; (np apt-get install curlftpfs).
Odpalamy go jako:
$ curlftpfs ftp://user:pass@host/ ./mountpoint Do tego potrzebujemy uprawnienia grupy fuse więć jako root musimy sobie ją dodać od naszego użytkownika.
Jeżeli mamy dużo połączeń do zarządzania przyda się mały skrypt:
 ftpmount  sterowany konfiguracją w pliku config.ini:
[hostone.pl] host=ftp.hostone.pl user=userone pass=passone # jak nie podamy tego wpisu, program się zapyta o hasło mountpoint=hostone.pl [hosttwo.pl] host=ftp.hosttwo.pl user=usertwo mountpoint=hosttwo.pl Wtedy wystarczy nam:
 ./ftpmount hostone.pl # montujemy połączenie ./ftpmount -u hostone.pl #odmontowywujemy połączenie ./ftpmount -l # lista dostępnych konfiguracji połączeń  </description>
    </item>
    
    <item>
      <title>git pre-commit hook - symfony / php</title>
      <link>https://marekwywial.name/posts/blog20090511git-pre-commit-hook-symfony-php/</link>
      <pubDate>Mon, 11 May 2009 10:25:43 +0000</pubDate>
      
      <guid>https://marekwywial.name/posts/blog20090511git-pre-commit-hook-symfony-php/</guid>
      <description>Mam jeszcze tą nieprzyjemnośc pracy z PHP (w tym przypadku z symfony framework) i aby była przyjemniejsza dodałem sobie hook na pre-commit do git&amp;rsquo;a. * http://dl.getdropbox.com/u/185133/git/pre-commit
by zadziałało przerywanie commit&amp;rsquo;a gdy &amp;lsquo;symfony unit-test&amp;rsquo; się nie udadzą, potrzebna jest łatka na symfony (przynajmniej na moją wersję 1.0.17) * http://dl.getdropbox.com/u/185133/git/symfony_return_code.diff
Hook zakłada, że commit jest robiony w katalogu projektu (tak mam najczęsciej) i znajduje sie w nim plik &amp;lsquo;symfony&amp;rsquo;
btw: hook wymaga pythona.</description>
    </item>
    
    <item>
      <title>home.pl &amp; django - pierwsza potyczka</title>
      <link>https://marekwywial.name/posts/blog20090226homepl-django-pierwsza-potyczka.html</link>
      <pubDate>Thu, 26 Feb 2009 21:59:38 +0100</pubDate>
      
      <guid>https://marekwywial.name/posts/blog20090226homepl-django-pierwsza-potyczka.html</guid>
      <description>home.pl obsługuje pythona jako cgi (pliki .py) więc tego będziemy się trzymać. Instalację wykonamy w katalogu /py
instalacja django hardcoded ale działa ;) wrzucamy to do /py i ruchamiamy poprzez www (plik install.py)
1 2 3 4 5 6 7 8 9  #!/usr/bin/env python import os os.system(&amp;#34;wget http://www.djangoproject.com/download/1.0.2/tarball/&amp;#34;) os.system(&amp;#34;tar zxf Django-1.0.2-final.tar.gz&amp;#34;) os.system(&amp;#34;rm Django-1.0.2-final.tar.gz&amp;#34;) os.system(&amp;#34;mv Django-1.0.2-final tmp&amp;#34;) os.system(&amp;#34;mv tmp/django django&amp;#34;)   nasz projekt Lokalnie wołamy
$ django-admin.py startproject pytest i wrzucamy katalog pytest przez ftp na home do katalogu /py .
dispatch.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71  #!/usr/bin/env python import os, sys import django.core.handlers.wsgi def run_with_cgi(application): environ = dict(os.environ.items()) environ[&amp;#39;wsgi.input&amp;#39;] = sys.stdin environ[&amp;#39;wsgi.errors&amp;#39;] = sys.stderr environ[&amp;#39;wsgi.version&amp;#39;] = (1,0) environ[&amp;#39;wsgi.multithread&amp;#39;] = False environ[&amp;#39;wsgi.multiprocess&amp;#39;] = True environ[&amp;#39;wsgi.run_once&amp;#39;] = True if environ.get(&amp;#39;HTTPS&amp;#39;,&amp;#39;off&amp;#39;) in (&amp;#39;on&amp;#39;,&amp;#39;1&amp;#39;): environ[&amp;#39;wsgi.url_scheme&amp;#39;] = &amp;#39;https&amp;#39; else: environ[&amp;#39;wsgi.url_scheme&amp;#39;] = &amp;#39;http&amp;#39; headers_set = [] headers_sent = [] def write(data): if not headers_set: raise AssertionError(&amp;#34;write() before start_response()&amp;#34;) elif not headers_sent: # Before the first output, send the stored headers status, response_headers = headers_sent[:] = headers_set sys.</description>
    </item>
    
  </channel>
</rss>