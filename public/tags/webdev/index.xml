<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>webdev on Marek Wywiał</title>
    <link>https://marekwywial.name/tags/webdev/</link>
    <description>Recent content in webdev on Marek Wywiał</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pl</language>
    <lastBuildDate>Tue, 13 Aug 2013 18:53:49 +0000</lastBuildDate>
    
	<atom:link href="https://marekwywial.name/tags/webdev/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Python SOAP server (flask) &#43; generowanie wsdl</title>
      <link>https://marekwywial.name/posts/blog20130813python-soap-server-flask-wsdl-generation-pl.html</link>
      <pubDate>Tue, 13 Aug 2013 18:53:49 +0000</pubDate>
      
      <guid>https://marekwywial.name/posts/blog20130813python-soap-server-flask-wsdl-generation-pl.html</guid>
      <description>&lt;p&gt;Krótkie wprowadzenie jak uruchomić prosty serwer SOAP przy pomocy pakietu &amp;ldquo;Flask-Enterprise&amp;rdquo;.
Do przetestowania połączenia do serwera użyjemy klienta z pakietu &amp;ldquo;suds&amp;rdquo;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>home.pl &amp; django - pierwsza potyczka</title>
      <link>https://marekwywial.name/posts/blog20090226homepl-django-pierwsza-potyczka.html</link>
      <pubDate>Thu, 26 Feb 2009 21:59:38 +0100</pubDate>
      
      <guid>https://marekwywial.name/posts/blog20090226homepl-django-pierwsza-potyczka.html</guid>
      <description>home.pl obsługuje pythona jako cgi (pliki .py) więc tego będziemy się trzymać. Instalację wykonamy w katalogu /py
instalacja django hardcoded ale działa ;) wrzucamy to do /py i ruchamiamy poprzez www (plik install.py)
1 2 3 4 5 6 7 8 9  #!/usr/bin/env python import os os.system(&amp;#34;wget http://www.djangoproject.com/download/1.0.2/tarball/&amp;#34;) os.system(&amp;#34;tar zxf Django-1.0.2-final.tar.gz&amp;#34;) os.system(&amp;#34;rm Django-1.0.2-final.tar.gz&amp;#34;) os.system(&amp;#34;mv Django-1.0.2-final tmp&amp;#34;) os.system(&amp;#34;mv tmp/django django&amp;#34;)   nasz projekt Lokalnie wołamy
$ django-admin.py startproject pytest i wrzucamy katalog pytest przez ftp na home do katalogu /py .
dispatch.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71  #!/usr/bin/env python import os, sys import django.core.handlers.wsgi def run_with_cgi(application): environ = dict(os.environ.items()) environ[&amp;#39;wsgi.input&amp;#39;] = sys.stdin environ[&amp;#39;wsgi.errors&amp;#39;] = sys.stderr environ[&amp;#39;wsgi.version&amp;#39;] = (1,0) environ[&amp;#39;wsgi.multithread&amp;#39;] = False environ[&amp;#39;wsgi.multiprocess&amp;#39;] = True environ[&amp;#39;wsgi.run_once&amp;#39;] = True if environ.get(&amp;#39;HTTPS&amp;#39;,&amp;#39;off&amp;#39;) in (&amp;#39;on&amp;#39;,&amp;#39;1&amp;#39;): environ[&amp;#39;wsgi.url_scheme&amp;#39;] = &amp;#39;https&amp;#39; else: environ[&amp;#39;wsgi.url_scheme&amp;#39;] = &amp;#39;http&amp;#39; headers_set = [] headers_sent = [] def write(data): if not headers_set: raise AssertionError(&amp;#34;write() before start_response()&amp;#34;) elif not headers_sent: # Before the first output, send the stored headers status, response_headers = headers_sent[:] = headers_set sys.</description>
    </item>
    
    <item>
      <title>lint dla php</title>
      <link>https://marekwywial.name/posts/blog20080902lint-dla-php/</link>
      <pubDate>Tue, 02 Sep 2008 21:01:02 +0000</pubDate>
      
      <guid>https://marekwywial.name/posts/blog20080902lint-dla-php/</guid>
      <description>Za dnia piszę najczęściej w php i zazdroszczę pythonowi pylinta.
Z ciekawości zagooglałem i znalazłem rozwiązanie dla PHP sprawdzające Coding Standard:
 pear install PHP_CodeSniffer phpcs --standard=Zend SomeTest.class.php  phpcs -i podaje dostępne standardy:
PEAR
MySource
PHPCS
Squiz
Zend
Mi najbardzie odpowiada Zend co widać po wynikach lintowania, najczęściej 0 ostrzeżeń i błędów ;).
phpcs pozwala także tworzyć swoje własne standardy kodowanie oraz - co bardzo mnie cieszy - podpiąć go jako precommit hook do svn&amp;rsquo;a.</description>
    </item>
    
    <item>
      <title>netbeans 6.5 &#43; php5 &#43; symfony &#43; xdebug</title>
      <link>https://marekwywial.name/posts/blog20080824netbeans-65-php5-symfony-xdebug/</link>
      <pubDate>Sun, 24 Aug 2008 14:17:12 +0000</pubDate>
      
      <guid>https://marekwywial.name/posts/blog20080824netbeans-65-php5-symfony-xdebug/</guid>
      <description>W Netbeans 6.5 pojawia się support dla php5. W/g informacji na stronie netbeans oznacza to:
 PHP Editor (Code completion, syntactic and semantic code highlighting) Support for heredoc notation and PHTML Debugging using Xdebug Generators for MySQL database code snippets  Temat, który najbardziej mnie interesował to jak zadziała debugging przy pomocy Xdebug. Postanowiłem sprawdzić to z istniejącym projektem bazującym na frameworku Symfony.
 Zainstalowałem netbeans pobierając odpowiednią paczkę ze strony netbeans Zainstalowałem Xdebug poprzez pecl install xdebug i dodaniu do konfiguracji php wierszy:  # xdebug, jako zend_extension. ścieżke zmienić należy oczywiście na odpowiednią dla Twojej instalacji zend_extension=/usr/lib/php5/20060613+lfs/xdebug.so xdebug.remote_enable=on  dodałem w netbeans nowy projekt php z istniejącymi źródłami (projekt już mam uruchomiony), podając podaczas konfiguracji:
 ścieżkę do źródeł projektu adres url do projektu katalog zawierający dane web (dostępne poprzez podany url projektu) w tym przypadku podkatalog &amp;lsquo;web&amp;rsquo; w katalogu projektu punkt startowy czyli domyślny kontroler dla projektu, w tym przypadku &amp;lsquo;frontend.php&amp;rsquo; w podkatalogu &amp;lsquo;web&amp;rsquo;  następnie wystarczyło otworzyć plik projektu (np podany wyżej kontroler) z toolbar&amp;rsquo;a wybrać &amp;lsquo;debug project&amp;rsquo; lub wciśnąć ctrl+F5
  W tym momencie w uruchomionej przeglądarce (u mnie firefox 3.x netbeans otwarł główny kontroler projektu wraz z parameterm XDEBUG_SESSION_START=netbeans-xdebug. W tym samym momencie w edytorze netbeans podświetlony został pierwszy wiersz kontrolera &amp;hellip; i już.</description>
    </item>
    
  </channel>
</rss>